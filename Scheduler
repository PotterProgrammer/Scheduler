#!/usr/bin/perl


use warnings;
use strict;

use lib "./";

use Mojolicious::Lite;
plugin 'Subprocess';

use Date::Calc qw(:all);

use Messaging;
use SaveRestore;
use BuildSchedule qw( buildScheduleForDates);

use open qw(:std :utf8);
use utf8;
use utf8::all;

my $VERSION = '0.1.1';

my @Slots;
my @Volunteers;
my @Schedule;

sub findVolunteer($$);

#main:
{
	get '/' => sub
	{
		my ($self) = @_;

		$self->stash( restored=>"no", textMessage=>'', title=>'');
		$self->render( 'index');
	};

	get '/index' => sub
	{
		print "there...\n";

		my ($self) = @_;
warn join ":", @{app->static->paths};
warn join ":", @{app->static->classes};
warn join ":", @{app->renderer->paths};
warn join ":", @{app->renderer->classes};
		$self->stash( restored => "no", textMessage=>'', title=>'');
		$self->render( 'index');
	};

	#------------------------------------------------------------------------------
	#  get '/addSlots'
	#------------------------------------------------------------------------------
	get '/addSlots' => sub
	{
		my $self = shift;

		@Slots = readSlots();

		$self->stash( slots=>\@Slots);

		$self->render( "addSlots");

	};

	#------------------------------------------------------------------------------
	#  get '/editSlots'
	#------------------------------------------------------------------------------
	get '/editSlots' => sub
	{
		my $self = shift;

		@Slots = readSlots();

		$self->stash( slots=>\@Slots);

		$self->render( "editSlots");

	};


	#------------------------------------------------------------------------------
	#  get '/editVolunteers'
	#------------------------------------------------------------------------------
	get '/editVolunteers' => sub
	{
		my $self = shift;

		@Slots = readSlots();
		@Volunteers = readVolunteers();

		$self->stash( slots=>\@Slots, volunteers=>\@Volunteers);

		$self->render( "editVolunteers");

	};

	#------------------------------------------------------------------------------
	#  get '/addVolunteer' => sub
	#  		This call provides a screen for adding entries for volunteers.
	#------------------------------------------------------------------------------
	get '/addVolunteer' => sub
	{
		my $self = shift;

		@Slots = readSlots();
		@Volunteers = readVolunteers();

		$self->stash( slots=>\@Slots, type=>"add", volunteers=>\@Volunteers, volunteer=>undef, userMode=>0, title=>"Add Volunteers");

		$self->render( "addVolunteers");

	};


	#------------------------------------------------------------------------------
	#  get '/editVolunteer?edit=<name>' => sub
	#  		This call provides a screen for editing the settings of the named
	#  		volunteer
	#------------------------------------------------------------------------------
	get '/editVolunteer' => sub
	{
		my $self = shift;
		my $userMode = 0;
		my $name = $self->param("edit");
		if ( defined( $name))
		{
			print "Editing user $name\n";
		}
		else
		{
			if ( defined( $name = $self->param( "user")))
			{
				print "Editing info for user $name\n";
				$userMode = 1;
			}
		}

		print "In editVolunteer.  Name=" . $name . "\n";
		print "User mode = $userMode\n";

		@Slots = readSlots();
		@Volunteers = readVolunteers();

		my ($index, $volunteer) = findVolunteer( 0, $name);

		$self->stash( slots=> \@Slots, volunteers=>undef, volunteer=>$volunteer, type=>"edit", title=>"Edit Information for " . $name, userMode=>$userMode);

		$self->render( "addVolunteers");

	};


	#------------------------------------------------------------------------------
	#	get '/buildSchedule' => sub
	#		This call provides a link to build a schedule.  When invoked
	#		without the parameters "startDate" and "endDate", it redirects to a
	#		page where those values may be supplied.  When the start and end
	#		dates are provided it generates the schedule and redirects to the
	#		schedule viewing page.
	#------------------------------------------------------------------------------
	get '/buildSchedule' => sub
	{
		my $self = shift;

		my $startDate = $self->param('startDate');
		my $endDate = $self->param( 'endDate');
		my $sendSchedules = $self->param( 'sendSchedules');
		my $calendarURL = $self->url_for( '/calendarFor')->to_abs;

		if ( !defined( $startDate) || !defined( $endDate))
		{
			$self->stash( startDate=>$startDate, endDate=>$endDate);
			$self->render( "buildNewSchedule");
		}
		else
		{
			my $incomplete = buildScheduleForDates( $startDate, $endDate);
			my $rendered = 0;

			print "Here goes...\n";
			$self->subprocess( sub()
				{
					##
					##  To keep things from overflowing remove Schedule
					##  entries that are more than 90 days old
					##
					print "Purging...\n";
					my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime( time);
					$year += 1900;
					$mon ++;
					my ( $keepyear, $keepmonth, $keepday) = Add_Delta_Days( $year, $mon, $mday, -91);
					my $clearBefore = sprintf( "%04d-%02d-%02d", $keepyear, $keepmonth, $keepday);
					clearSavedSchedule( "2000-01-01", $clearBefore);
				}, sub()
				{
					print "Cleanup finished...\n";
				}
				);

			##
			##  Was a complete schedule built?
			##
			if ( !$incomplete)
			{
				##
				##  Does the user want notifications to be sent?
				##
				if ( defined( $sendSchedules) && $sendSchedules !~/false/)
				{
					##
					##  If so, send out notifications automatically
					##
	##-->				$self->subprocess( sub
	##-->					{
	##-->						print "Sending new schedules...\n";
	##-->						sendSchedules( $startDate, $endDate, $calendarURL);
	##-->						print "Schedules sent...\n";
	##-->					},sub { my ($self, @results) = @_; print "Done"});
					
					my $cmd =  "curl '" . $self->url_for( "/sendSchedule")->to_abs . "?start=${startDate}&end=${endDate}' &";
					print "running $cmd\n";
					system( $cmd);
					print "Sending...\n";
				}
			}

			@Schedule = readSchedule( $startDate, $endDate);
			print "Viewing schedule...\n";
			my $url = $self->url_for( "/viewTheSchedule");
			$self->redirect_to( $url->query( {incomplete=>$incomplete, sentSchedules=>$sendSchedules, start=>$startDate, end=>$endDate} ));
		}
	};


	#------------------------------------------------------------------------------
	#	get '/sendSchedule
	#		This call sends personalized schedules to all who are volunteering
	#		on dates from the start date through the end date.
	#------------------------------------------------------------------------------
	get '/sendSchedule' => sub
	{
		my $self = shift;
		my $start = $self->param( "start");
		my $end = $self->param( "end");
		my $calendarURL = $self->url_for( '/calendarFor')->to_abs;

		if ( !defined( $start) || !defined( $end))
		{
			$self->render( "sendVolunteerSchedules");
		}
		else
		{
			sendSchedules( $start, $end, $calendarURL);

			$self->redirect_to( '/index?messageSent=true');
		}
	};

	#------------------------------------------------------------------------------
	#	get '/calendarFor/:name' => sub
	#		This call returns a .ics file containing the scheduled dates that
	#		:name is set to volunteer.  Note that this URL also requires a
	#		query string containing "start=YYYY-MM-DD" and "end=YYYY-MM-DD"
	#------------------------------------------------------------------------------
	get '/calendarFor/:name' => sub
	{
		my $self = shift;
		my $name = $self->param( "name");
		print "The name is $name\n";
		my $start = $self->param( "start");
		my $end = $self->param( "end");

		if ( !defined( $start) || !defined( $end))
		{
			$self->render( "not_found");
		}
		my $calendar = makeCalendarFor( $name, $start, $end);

		$self->res->headers->content_disposition( "attachment;filename=volunteer.ics");
		$self->render( text=>$calendar);
	};

	#------------------------------------------------------------------------------
	#	get '/showSchedule'
	#		This call redirects to a page that prompts for the schedule date range.
	#------------------------------------------------------------------------------
	get '/showSchedule' => sub
	{
		my $self = shift;
		$self->render( "showSchedule");
	};

	#------------------------------------------------------------------------------
	#	get '/viewTheSchedule'
	#		This call redirects to a page that prompts for the schedule date range.
	#------------------------------------------------------------------------------
	get '/viewTheSchedule' => sub
	{
		my $self = shift;
		my $start = $self->param( "start");
		my $end = $self->param( "end");
		my $incomplete = $self->param( "incomplete");
		my $sentSchedules = $self->param( "sentSchedules");

		@Schedule = readSchedule( $start, $end);
		$self->stash( incomplete=>$incomplete, sentSchedules=>$sentSchedules, startDate=>$start, endDate=>$end, schedule=>\@Schedule);
		$self->render( "viewSchedule");
	};

	#------------------------------------------------------------------------------
	#	get '/sendReminders' 
	#		This call sends reminders to any volunteers that are scheduled to
	#		serve in the next 6 days.
	#------------------------------------------------------------------------------
	get '/sendReminders' => sub
	{
		my $self = shift;
		sendReminders( 6);

		$self->stash( sendingMessages => 1);
		$self->redirect_to( '/index?messageSent=true');
	};

	#------------------------------------------------------------------------------
	#	get '/requestUpdates'
	#		This call sends a request to all of the volunteers to update their
	#		available dates and personal info.
	#------------------------------------------------------------------------------
	get '/requestUpdates' => sub
	{
		my $self = shift;
		my $base_url = $self->url_for( '/editVolunteer')->to_abs;

		sendUpdateRequest( $base_url);
		$self->redirect_to( '/index?messageSent=true');
	};

	#------------------------------------------------------------------------------
	#	get '/config'
	#		This call pulls up the page for editing system configuration settings
	#------------------------------------------------------------------------------
	get '/config' => sub
	{
		my $self = shift;

		my %configInfo = getConfigInfo();
		$self->stash( %configInfo);
		$self->render( 'editConfig');
	};

	#------------------------------------------------------------------------------
	#	get '/restore'
	#		This call routes to the page for restoring from a backup
	#------------------------------------------------------------------------------
	get '/restore' => sub
	{
		my $self = shift;

		print "\n\nTHERE???\n\n";
		$self->render( 'restoreBackup');
	};

	#------------------------------------------------------------------------------
	#	get '/enableAutomaticReminders' 
	#		This call routes to the page for enabling/disabling automatic reminders
	#------------------------------------------------------------------------------
	get '/enableAutomaticReminders' => sub
	{
		my $self = shift;

		my ( $enabled, $hour, $minute, $weekday, $crontab) = readScheduledReminder();
		my $time = sprintf( "%02d:%02d", $hour, $minute);
		if ( !defined( $weekday))
		{
			$weekday="";
		}
		$self->stash( enabled=>$enabled, time=>$time, weekday=>$weekday);
		$self->render( 'enableAutomaticReminders');
	};

	#------------------------------------------------------------------------------
	#	get '/about' 
	#		This displays the "about" info
	#------------------------------------------------------------------------------
	get '/about' => sub
	{
		my $self = shift;

		$self->stash( version => $VERSION);
		$self->render( 'about');
	};

	
	#------------------------------------------------------------------------------
	#	post '/restore'
	#		This call carries out the actual restore
	#------------------------------------------------------------------------------
	post '/restore' => sub
	{
		my $self = shift;
	 
		print "\n\n\nHere dude\n\n\n";
		# Check file size
		if ($self->req->is_limit_exceeded)
		{
			return $self->render(text => 'File is too big.', status => 200);
		}
	 
		# Process uploaded file
		my $filename = $self->param('filename');
		my $size = $filename->size;
		my $name = $filename->filename;
		unlink( "dataBackup.pbt");
		unlink( "dataBackup.tar");
		print "The keys are: " . join( ", ", keys( %$filename)) . "\n";
	##--> 	print "Asset=" . $filename->asset->slurp . "\n";
		$filename->asset->move_to( "dataBackup.pbt");
		SaveRestore::closeDB();

		if ( -e 'dataBackup.pbt')
		{
			system( "gpg --yes --no-tty --batch --passphrase TryToBeTimely --quiet -o dataBackup.tar dataBackup.pbt");
			if ( -e 'dataBackup.tar')
			{
				my $tar = Archive::Tar->new;
				$Archive::Tar::INSECURE_EXTRACT_MODE = 1;
				if ( $tar->read( 'dataBackup.tar'))
				{
					$tar->extract();
		
					##
					##  Do we have a schedule for sending reminders?
					##
					if ( -e 'reminderSchedule.txt')
					{
						open( my $FILE, '<', 'reminderSchedule.txt') || die "Couldn't open reminder schedule! $!\n";
						my $data = <$FILE>;
						close $FILE;
						$data =~ m/(\d)\s+(\d+:\d+)\s+(\S+)/;
						
						##
						##  Were reminders scheduled?
						##
						if ( $1)
						{
							##
							##  If so, schedule them as before
							##
							scheduleReminder( $3, $2, $self->tx->local_port);
						}
						else
						{
							##
							##  If not, unschedule them
							##
							unscheduleReminder();
						}
					}

					$self->stash( textMessage => "Restore completed!", title=>'Success', boxtime=>5);
					print "\n\n\n\nRestored!!!\n\n\n";
				}
				else
				{
					$self->stash( textMessage => "Unable to read backup file!", title=>'Warning!', boxtime=>5);
					print "\n\n\n\nRead error!!!\n\n\n";
				}
			}
			else
			{
				$self->stash( textMessage => "Unable to read provided backup file!", title=>'Warning!', boxtime=>5);
					print "\n\n\n\nRead error dude!!!\n\n\n";
			}
		}

		SaveRestore::initDB();

		$self->stash( restored=>'yes');
		$self->render( 'index');
	};

	#------------------------------------------------------------------------------
	#  post '/modifyVolunteer'
	#  		This call modifies information for the provided name in the
	#  		volunteers table.
	#------------------------------------------------------------------------------
	post '/modifyVolunteer' => sub
	{
		my $self = shift;

		my $json = $self->req->json();
		my $name = $json->{originalName};
		print "MODFIY got: { " . join( ',', map { "\"$_\" : \"$json->{$_}\""} keys( %{$json})) . "}\n";
		
		print "\n\n********* REMOVING $name  ********\n\n";
		removeVolunteer( $name);

		##
		##  Write the volunteer info to the database
		##
		print "******** Saving " . join( ',', map { ", $_: $json->info->{$_}\n"} keys( %{$json->{info}})) . " *****\n\n";
		my $days = $json->{info}->{daysUnavailable};
		print "I see: " . join( ',', $days);
		saveVolunteer( $json->{info});
						

		@Volunteers = readVolunteers();
		$self->stash( volunteers=>\@Volunteers);

		$self->render( 'volunteers');
	};

	#------------------------------------------------------------------------------
	#  post '/removePosition'
	#  		This call deletes the provided title entry from the positions table
	#------------------------------------------------------------------------------
	post '/removePosition' => sub
	{
		my $self = shift;

		my $json = $self->req->json();
		my $title = $json->{title};
		
		removeSlot( $title);

		@Slots = readSlots();
		$self->stash( slots=>\@Slots);

		$self->render( 'slots');
	};


	#------------------------------------------------------------------------------
	#  post '/removeVolunteer'
	#  		This call deletes the provided title entry from the volunteers table
	#------------------------------------------------------------------------------
	post '/removeVolunteer' => sub
	{
		my $self = shift;

		my $json = $self->req->json();
		my $name = $json->{name};
		
		print "\n\n********* REMOVING $name  ********\n\n";
		removeVolunteer( $name);

		@Volunteers = readVolunteers();
		$self->stash( volunteers=>\@Volunteers);

		$self->render( 'volunteers');
	};

	#------------------------------------------------------------------------------
	#	post '/saveConfig'
	#		This call saves the newly defined configuration settings
	#------------------------------------------------------------------------------
	post '/saveConfig' => sub
	{
		my $self = shift(@_);
		if ( $self->param('submit') =~ /Save/)
		{
			my %config;

			$config{"EmailServer"} = $self->param( "EmailServer");
			$config{"EmailPort"} = $self->param( "EmailPort");
			$config{"EmailUID"} = $self->param( "EmailUID");
			$config{"EmailPWD"} = $self->param( "EmailPWD");
			$config{"EmailSender"} = $self->param( "EmailSender");
			$config{"TwilioAcct"} = $self->param( "TwilioAcct");
			$config{"TwilioAuth"} = $self->param( "TwilioAuth");
			$config{"TwilioPhone"} = $self->param( "TwilioPhone");
			$config{"AdminName"} = $self->param( "AdminName");
			$config{"AdminEmail"} = $self->param( "AdminEmail");
			$config{"AdminPhone"} = $self->param( "AdminPhone");
			$config{"AdminText"} = $self->param( "AdminText");

			saveConfig( %config);
		}

		$self->stash( restored => "no", textMessage=>'', title=>'');
		$self->render( "index");
	};


	#------------------------------------------------------------------------------
	#	websocket '/backup'
	#		This call stores the existing config and database in a tar file,
	#		encrypts it, and then makes it available for download.
	#------------------------------------------------------------------------------
	websocket '/backup' => sub
	{
		my $ws = shift;

		$ws->on (text => sub
			{
				$ws->inactivity_timeout(300);
				my ($ws, $message) = @_;

				print "Got a '$message' request\n";
				if ( $message =~ m/Backup/)
				{
					my $backupFilename = SaveRestore::backupData();
					$ws->send( $backupFilename);
				}
				else
				{
					$ws->send( "What??!");
				}
			}
			);
	};

	#------------------------------------------------------------------------------
	#  websocket '/checkDates'
	#  		This call checks to see if the provided date range would conflict
	#  		with the existing schedule.  It returns an array of conflicting dates.
	#------------------------------------------------------------------------------
	websocket '/checkDates' => sub
	{
		my $self = shift;

		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $json) = @_;

						my @dates = checkScheduledDates( $json->{start}, $json->{end});

						print "I got back: " . join( ", ", @dates) . "\n";

						##
						##  Send back info
						##
						$self->send( { json=> {	dates => \@dates
											  }
									  }
									);
					}
				 );
		
	};

	#------------------------------------------------------------------------------
	#  websocket '/getPositionInfo'
	#  		This call gets the information about the position at the specified
	#  		index in the list.
	#------------------------------------------------------------------------------
	websocket '/getPositionInfo' => sub
	{
		my $self = shift;

		##
		##  See if we received a message
		##
		$self->on( message => sub
					{
						my ($self, $posIndex) = @_;

						##
						##  Send back info
						##
						$self->send( { json=> {	title => $Slots[$posIndex]->{title},
												dayOfWeek =>$Slots[$posIndex]->{dayOfWeek},
												startTime => $Slots[$posIndex]->{startTime}, 
												endTime => $Slots[$posIndex]->{endTime}, 
												numberNeeded => $Slots[$posIndex]->{numberNeeded}
											  }
									  }
									);
					}
				 );
		
	};

	#------------------------------------------------------------------------------
	#  websocket '/addPosition'
	#  		This call adds the provided entry to the position table
	#------------------------------------------------------------------------------
	websocket '/addPosition' => sub
	{
		my $self = shift;

		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $slot) = @_;
	##-->					my $slot = {title=>$title, dayOfWeek=>$dayOfWeek, time=>$time, numberNeeded=>$numberNeeded};

						saveSlot( $slot);

						##
						##  Send back info
						##
						$self->send( { json=> {	status => "Saved"
											  }
									 }
									);
					}
				 );
		
	};

	#------------------------------------------------------------------------------
	#  websocket '/replacePosition'
	#  		This call replaces the provided entry to the position table
	#------------------------------------------------------------------------------
	websocket '/replacePosition' => sub
	{
		my $self = shift;

		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $json) = @_;
						my $replaceTitle = $json->{replace};
						my $slot = $json->{with};

						print "Replacing: $replaceTitle  with:\n";
						foreach (keys(%$slot))
						{
							print "\t$_: $slot->{$_}\n";
						}

						##
						##  Note that we delete the old and insert to allow
						##  for changing the title
						##
						removeSlot( $replaceTitle);
						saveSlot( $slot);

						##
						##  Send back info
						##
						$self->send( { json=> {	status => "Saved"
											  }
									 }
									);
					}
				 );
		
	};

	#------------------------------------------------------------------------------
	#  websocket '/updateSchedule'
	#  		This call modifes information in the schedule, as provided by the caller.
	#------------------------------------------------------------------------------
	websocket '/updateSchedule' => sub
	{
		my $self = shift;


		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $json) = @_;

						##
						##  Write the volunteer info to the database
						##
						updateSchedule( $json);
						
						##
						##  Send back info
						##
						$self->send( { json=> {	status => "Saved" }});
					}
				 );
	};

	#------------------------------------------------------------------------------
	#  websocket '/getRoleVolunteers'
	#  		This call gets the names of volunteers who signed up for the named
	#  		role.
	#------------------------------------------------------------------------------
	websocket '/getRoleVolunteers' => sub
	{
		my $self = shift;


		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $json) = @_;

						##
						##  Get the list of volunteers for the role
						##
						my @roleVolunteers = getRoleVolunteerList( $json->{title});
						
						##
						##  Send back info
						##
						$self->send( { json=> {	nameList => \@roleVolunteers
											  }
									  }
								   );
					}
				 );
		
	};

	#------------------------------------------------------------------------------
	#  websocket '/getVolunteerInfo'
	#  		This call gets the information about the volunteer at the specified
	#  		index in the list.
	#------------------------------------------------------------------------------
	websocket '/getVolunteerInfo' => sub
	{
		my $self = shift;


		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $json) = @_;
						my $found = 1;

						##
						##  Make sure we have the right index for the name provided
						##
						my ($index, $name) = findVolunteer( $json->{index}, $json->{name});
						
						##
						##  Send back info
						##
						if ( defined( $index))
						{
							$self->send( { json=> {	name => $Volunteers[$index]->{name},
													email =>$Volunteers[$index]->{email},
													phone => $Volunteers[$index]->{phone}, 
													contact => $Volunteers[$index]->{contact},
													daysDesired => $Volunteers[$index]->{daysDesired},
													desiredRoles => $Volunteers[$index]->{desiredRoles},
													daysUnavailable => $Volunteers[$index]->{daysUnavailable}
												  }
										  }
										);
						}
						else
						{
							$self->send( { json=> {	name => "n/a",
													email => "n/a",
													phone => "n/a", 
													contact => "n/a", 
													daysDesired => "n/a",
													desiredRoles => "n/a",
													daysUnavailable => "n/a"
												  }
										  }
										);
						}
					}
				 );
		
	};

	#------------------------------------------------------------------------------
	#  websocket '/saveVolunteerInfo'
	#  		This call adds the information about the position at the specified
	#  		index in the list.
	#------------------------------------------------------------------------------
	websocket '/saveVolunteerInfo' => sub
	{
		my $self = shift;


		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $json) = @_;

						##
						##  Write the volunteer info to the database
						##
						saveVolunteer( $json);
						
						##
						##  Send back info
						##
						$self->send( { json=> {	status => "OK" }});
					}
				 );
	};

	websocket '/updateReminders' => sub
	{
		my $self = shift;
		my $port = $self->tx->local_port;

		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $json) = @_;
						my $status = "";

						if ( $json->{enabled} eq "true" || $json->{enabled} == 1)
						{
							$status = "Automatic reminders are enabled.";
							scheduleReminder( $json->{weekday}, $json->{time}, $port);
						}
						else
						{
							$status = "Automatic reminders are disabled.";
							unscheduleReminder();
						}

						$self->send( {json => { status => $status}});
					}
				 );
	};

	#------------------------------------------------------------------------------
	#  websocket '/scheduleWeeklyReminders'
	#  		This call sets or clears a time to send weekly reminders to those
	#  		scheduled to volunteer within the next week.
	#------------------------------------------------------------------------------
	websocket '/scheduleReminders' => sub
	{
		my $self = shift;

		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $json) = @_;

					print "Dump:\n";
						foreach my $key (keys( %{$json}))
						{
							print "Key: $key => " . $json->{$key} . "\n";
						}
						print "$json->{enabled}\n";
						if ( $json->{enabled} == 1)
						{
							my $weekday = $json->{weekday};
							my $time = $json->{time};

							##
							##  Set a recurring task to send reminders to the indicated port
							##
							scheduleReminder( $weekday, $time, $self->tx->local_port);
						}
						else
						{
							##
							##  Disable automatic sending of reminders
							##
							unscheduleReminder();
						}

						##
						##  Send back info
						##
						$self->send( { json=> {	status => "OK" }});
					}
				 );
		
	};



	@Slots = readSlots();

	app->config( hypnotoad=>{listen =>['http://*:3000']});
	app->secrets( ['Your mileage may vary']);
	app->start;
}


#------------------------------------------------------------------------------
#  sub findVolunteer( $index, $name)
#  		This subroutine looks through the @Volunteers list (beginning with the
#  		provided index) to find an entry for the provided name.  If one is
#  		found, the routine returns the index of the entry and the entry.  If it
#  		is not found it returns (undef, undef).
#------------------------------------------------------------------------------
sub findVolunteer($$)
{
	my ($startAt, $name) = @_;
	my $slot;
	my $index;

	@Volunteers = readVolunteers();
	if ( !defined( $startAt) || !defined( $Volunteers[$startAt]) || $Volunteers[$startAt]->{name} ne $name)
	{
		while( my ($i, $volunteer) = each( @Volunteers))
		{
			if ( $volunteer->{name} eq $name)
			{
				$index = $i;
				$slot = $volunteer;
				last;
			}
		}
	}
	else
	{
		$index = $startAt;
		$slot = $Volunteers[$index];
	}

	return( $index, $slot);
}
