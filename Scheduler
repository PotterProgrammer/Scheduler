#!/usr/bin/perl


use warnings;
use strict;

use lib "./";

use Mojolicious::Lite;
##-->plugin 'Subprocess';

use Messaging;
use SaveRestore;
use BuildSchedule qw( buildScheduleForDates);

use open qw(:std :utf8);
use utf8;
use utf8::all;


my @Slots;
my @Volunteers;
my @Schedule;

sub findVolunteer($$);

#main:
{
	get '/' => sub
	{
		my ($self) = @_;

		$self->render( 'index');
	};

	get '/index' => sub
	{
		print "there...\n";

		my ($self) = @_;
warn join ":", @{app->static->paths};
warn join ":", @{app->static->classes};
warn join ":", @{app->renderer->paths};
warn join ":", @{app->renderer->classes};
		$self->render( 'index');
	};

	#------------------------------------------------------------------------------
	#  get '/addSlots'
	#------------------------------------------------------------------------------
	get '/addSlots' => sub
	{
		my $self = shift;

		@Slots = readSlots();

		$self->stash( slots=>\@Slots);

		$self->render( "addSlots");

	};

	#------------------------------------------------------------------------------
	#  get '/slots'
	#------------------------------------------------------------------------------
	get '/slots' => sub
	{
		my $self = shift;

		@Slots = readSlots();

		$self->stash( slots=>\@Slots);

		$self->render( "slots");

	};


	#------------------------------------------------------------------------------
	#  get '/editVolunteers'
	#------------------------------------------------------------------------------
	get '/editVolunteers' => sub
	{
		my $self = shift;

		@Slots = readSlots();
		@Volunteers = readVolunteers();

		$self->stash( slots=>\@Slots, volunteers=>\@Volunteers);

		$self->render( "editVolunteers");

	};

	#------------------------------------------------------------------------------
	#  get '/addVolunteer' => sub
	#  		This call provides a screen for adding entries for volunteers.
	#------------------------------------------------------------------------------
	get '/addVolunteer' => sub
	{
		my $self = shift;

		@Slots = readSlots();
		@Volunteers = readVolunteers();

		$self->stash( slots=>\@Slots, type=>"add", volunteers=>\@Volunteers, volunteer=>undef, userMode=>0, title=>"Add Volunteers");

		$self->render( "addVolunteers");

	};


	#------------------------------------------------------------------------------
	#  get '/editVolunteer?edit=<name>' => sub
	#  		This call provides a screen for editing the settings of the named
	#  		volunteer
	#------------------------------------------------------------------------------
	get '/editVolunteer' => sub
	{
		my $self = shift;
		my $userMode = 0;
		my $name = $self->param("edit");
		if ( defined( $name))
		{
			print "Editing user $name\n";
		}
		else
		{
			if ( defined( $name = $self->param( "user")))
			{
				print "Editing info for user $name\n";
				$userMode = 1;
			}
		}

		print "In editVolunteer.  Name=" . $name . "\n";
		print "User mode = $userMode\n";

		@Slots = readSlots();
		@Volunteers = readVolunteers();

		my ($index, $volunteer) = findVolunteer( 0, $name);

		$self->stash( slots=> \@Slots, volunteers=>undef, volunteer=>$volunteer, type=>"edit", title=>"Edit Information for " . $name, userMode=>$userMode);

		$self->render( "addVolunteers");

	};


	#------------------------------------------------------------------------------
	#	get '/buildSchedule' => sub
	#		This call provides a link to build a schedule.  When invoked
	#		without the parameters "startDate" and "endDate", it redirects to a
	#		page where those values may be supplied.  When the start and end
	#		dates are provided it generates the schedule and redirects to the
	#		schedule viewing page.
	#------------------------------------------------------------------------------
	get '/buildSchedule' => sub
	{
		my $self = shift;

		my $startDate = $self->param('startDate');
		my $endDate = $self->param( 'endDate');
		my $sendSchedules = $self->param( 'sendSchedules');
		my $calendarURL = $self->url_for( '/calendarFor')->to_abs;

		if ( !defined( $startDate) || !defined( $endDate))
		{
			$self->stash( startDate=>$startDate, endDate=>$endDate);
			$self->render( "buildNewSchedule");
		}
		else
		{
			my $incomplete = buildScheduleForDates( $startDate, $endDate);
			my $rendered = 0;

			##
			##  Was a complete schedule built?
			##
			if ( !$incomplete)
			{
	print "HERE!!\n";
				##
				##  Does the user want notifications to be sent?
				##
				if ( defined( $sendSchedules) && $sendSchedules !~/false/)
				{
print "SendSchedules = $sendSchedules\n";
sleep 5;
					##
					##  If so, send out notifications automatically
					##
	##-->				$self->subprocess( sub
	##-->					{
	##-->						print "Sending new schedules...\n";
	##-->						sendSchedules( $startDate, $endDate, $calendarURL);
	##-->						print "Schedules sent...\n";
	##-->					},sub { my ($self, @results) = @_; print "Done"});
					
					my $cmd =  "curl '" . $self->url_for( "/sendSchedule")->to_abs . "?start=${startDate}&end=${endDate}' &";
					print "running $cmd\n";
					system( $cmd);
					print "Sending...\n";
				}
			}

			print " **** THERE ****\n";
			@Schedule = readSchedule( $startDate, $endDate);
			$self->stash( incomplete=>$incomplete, sentSchedules=>$sendSchedules, startDate=>$startDate, endDate=>$endDate, schedule=>\@Schedule);
			print "Viewing schedule...\n";
			$self->render( "viewSchedule");
		}
	};


	#------------------------------------------------------------------------------
	#	get '/sendSchedule
	#		This call sends personalized schedules to all who are volunteering
	#		on dates from the start date through the end date.
	#------------------------------------------------------------------------------
	get '/sendSchedule' => sub
	{
		my $self = shift;
		my $start = $self->param( "start");
		my $end = $self->param( "end");
		my $calendarURL = $self->url_for( '/calendarFor')->to_abs;

		if ( !defined( $start) || !defined( $end))
		{
			$self->render( "sendVolunteerSchedules");
		}
		else
		{
			sendSchedules( $start, $end, $calendarURL);

			$self->redirect_to( '/index?messageSent=true');
		}
	};

	#------------------------------------------------------------------------------
	#	get '/calendarFor/:name' => sub
	#		This call returns a .ics file containing the scheduled dates that
	#		:name is set to volunteer.  Note that this URL also requires a
	#		query string containing "start=YYYY-MM-DD" and "end=YYYY-MM-DD"
	#------------------------------------------------------------------------------
	get '/calendarFor/:name' => sub
	{
		my $self = shift;
		my $name = $self->param( "name");
		print "The name is $name\n";
		my $start = $self->param( "start");
		my $end = $self->param( "end");

		if ( !defined( $start) || !defined( $end))
		{
			$self->render( "not_found");
		}
		my $calendar = makeCalendarFor( $name, $start, $end);

		$self->res->headers->content_disposition( "attachment;filename=volunteer.ics");
		$self->render( text=>$calendar);
	};

	#------------------------------------------------------------------------------
	#	get '/showSchedule'
	#		This call redirects to a page that prompts for the schedule date range.
	#------------------------------------------------------------------------------
	get '/showSchedule' => sub
	{
		my $self = shift;
		$self->render( "showSchedule");
	};

	#------------------------------------------------------------------------------
	#	get '/viewTheSchedule'
	#		This call redirects to a page that prompts for the schedule date range.
	#------------------------------------------------------------------------------
	get '/viewTheSchedule' => sub
	{
		my $self = shift;
		my $start = $self->param( "start");
		my $end = $self->param( "end");

		@Schedule = readSchedule( $start, $end);
		$self->stash( incomplete=>undef, sentSchedules=>undef,startDate=>$start, endDate=>$end, schedule=>\@Schedule);
		$self->render( "viewSchedule");
	};

	#------------------------------------------------------------------------------
	#	get '/sendReminders' 
	#		This call sends reminders to any volunteers that are scheduled to
	#		serve in the next 6 days.
	#------------------------------------------------------------------------------
	get '/sendReminders' => sub
	{
		my $self = shift;
		sendReminders( 6);

		$self->stash( sendingMessages => 1);
		$self->redirect_to( '/index?messageSent=true');
	};

	#------------------------------------------------------------------------------
	#	get '/requestUpdates'
	#		This call sends a request to all of the volunteers to update their
	#		available dates and personal info.
	#------------------------------------------------------------------------------
	get '/requestUpdates' => sub
	{
		my $self = shift;
		my $base_url = $self->url_for( '/editVolunteer')->to_abs;

		sendUpdateRequest( $base_url);
		$self->redirect_to( '/index?messageSent=true');
	};

	#------------------------------------------------------------------------------
	#  post '/modifyVolunteer'
	#  		This call modifies information for the provided name in the
	#  		volunteers table.
	#------------------------------------------------------------------------------
	post '/modifyVolunteer' => sub
	{
		my $self = shift;

		my $json = $self->req->json();
		my $name = $json->{originalName};
		print "MODFIY got: { " . join( ',', map { "\"$_\" : \"$json->{$_}\""} keys( %{$json})) . "}\n";
		
		print "\n\n********* REMOVING $name  ********\n\n";
		removeVolunteer( $name);

		##
		##  Write the volunteer info to the database
		##
		print "******** Saving " . join( ',', map { ", $_: $json->info->{$_}\n"} keys( %{$json->{info}})) . " *****\n\n";
		my $days = $json->{info}->{daysUnavailable};
		print "I see: " . join( ',', $days);
		saveVolunteer( $json->{info});
						

		@Volunteers = readVolunteers();
		$self->stash( volunteers=>\@Volunteers);

		$self->render( 'volunteers');
	};

	#------------------------------------------------------------------------------
	#  post '/removePosition'
	#  		This call deletes the provided title entry from the positions table
	#------------------------------------------------------------------------------
	post '/removePosition' => sub
	{
		my $self = shift;

		my $json = $self->req->json();
		my $title = $json->{title};
		
		removeSlot( $title);

		@Slots = readSlots();
		$self->stash( slots=>\@Slots);

		$self->render( 'slots');
	};


	#------------------------------------------------------------------------------
	#  post '/removeVolunteer'
	#  		This call deletes the provided title entry from the volunteers table
	#------------------------------------------------------------------------------
	post '/removeVolunteer' => sub
	{
		my $self = shift;

		my $json = $self->req->json();
		my $name = $json->{name};
		
		print "\n\n********* REMOVING $name  ********\n\n";
		removeVolunteer( $name);

		@Volunteers = readVolunteers();
		$self->stash( volunteers=>\@Volunteers);

		$self->render( 'volunteers');
	};


	#------------------------------------------------------------------------------
	#  websocket '/getPositionInfo'
	#  		This call gets the information about the position at the specified
	#  		index in the list.
	#------------------------------------------------------------------------------
	websocket '/getPositionInfo' => sub
	{
		my $self = shift;

		##
		##  See if we received a message
		##:w
		$self->on( message => sub
					{
						my ($self, $posIndex) = @_;

						##
						##  Send back info
						##
						$self->send( { json=> {	title => $Slots[$posIndex]->{title},
												dayOfWeek =>$Slots[$posIndex]->{dayOfWeek},
												time => $Slots[$posIndex]->{time}, 
												numberNeeded => $Slots[$posIndex]->{numberNeeded}
											  }
									  }
									);
					}
				 );
		
	};

	#------------------------------------------------------------------------------
	#  websocket '/addPosition'
	#  		This call adds the provided entry to the position table
	#------------------------------------------------------------------------------
	websocket '/addPosition' => sub
	{
		my $self = shift;

		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $slot) = @_;
	##-->					my $slot = {title=>$title, dayOfWeek=>$dayOfWeek, time=>$time, numberNeeded=>$numberNeeded};

						saveSlot( $slot);

						##
						##  Send back info
						##
						$self->send( { json=> {	status => "Saved"
											  }
									 }
									);
					}
				 );
		
	};

	#------------------------------------------------------------------------------
	#  websocket '/replacePosition'
	#  		This call replaces the provided entry to the position table
	#------------------------------------------------------------------------------
	websocket '/replacePosition' => sub
	{
		my $self = shift;

		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $json) = @_;
						my $replaceTitle = $json->{replace};
						my $slot = $json->{with};

						print "Replacing: $replaceTitle  with:\n";
						foreach (keys(%$slot))
						{
							print "\t$_: $slot->{$_}\n";
						}

						##
						##  Note that we delete the old and insert to allow
						##  for changing the title
						##
						removeSlot( $replaceTitle);
						saveSlot( $slot);

						##
						##  Send back info
						##
						$self->send( { json=> {	status => "Saved"
											  }
									 }
									);
					}
				 );
		
	};

	#------------------------------------------------------------------------------
	#  websocket '/updateSchedule'
	#  		This call modifes information in the schedule, as provided by the caller.
	#------------------------------------------------------------------------------
	websocket '/updateSchedule' => sub
	{
		my $self = shift;


		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $json) = @_;

						##
						##  Write the volunteer info to the database
						##
						updateSchedule( $json);
						
						##
						##  Send back info
						##
						$self->send( { json=> {	status => "Saved" }});
					}
				 );
	};

	#------------------------------------------------------------------------------
	#  websocket '/getRoleVolunteers'
	#  		This call gets the names of volunteers who signed up for the named
	#  		role.
	#------------------------------------------------------------------------------
	websocket '/getRoleVolunteers' => sub
	{
		my $self = shift;


		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $json) = @_;

						##
						##  Get the list of volunteers for the role
						##
						my @roleVolunteers = getRoleVolunteerList( $json->{title});
						
						##
						##  Send back info
						##
						$self->send( { json=> {	nameList => \@roleVolunteers
											  }
									  }
								   );
					}
				 );
		
	};

	#------------------------------------------------------------------------------
	#  websocket '/getVolunteerInfo'
	#  		This call gets the information about the volunteer at the specified
	#  		index in the list.
	#------------------------------------------------------------------------------
	websocket '/getVolunteerInfo' => sub
	{
		my $self = shift;


		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $json) = @_;
						my $found = 1;

						##
						##  Make sure we have the right index for the name provided
						##
						my ($index, $name) = findVolunteer( $json->{index}, $json->{name});
						
						##
						##  Send back info
						##
						if ( defined( $index))
						{
							$self->send( { json=> {	name => $Volunteers[$index]->{name},
													email =>$Volunteers[$index]->{email},
													phone => $Volunteers[$index]->{phone}, 
													contact => $Volunteers[$index]->{contact},
													daysDesired => $Volunteers[$index]->{daysDesired},
													desiredRoles => $Volunteers[$index]->{desiredRoles},
													daysUnavailable => $Volunteers[$index]->{daysUnavailable}
												  }
										  }
										);
						}
						else
						{
							$self->send( { json=> {	name => "n/a",
													email => "n/a",
													phone => "n/a", 
													contact => "n/a", 
													daysDesired => "n/a",
													desiredRoles => "n/a",
													daysUnavailable => "n/a"
												  }
										  }
										);
						}
					}
				 );
		
	};

	#------------------------------------------------------------------------------
	#  websocket '/saveVolunteerInfo'
	#  		This call adds the information about the position at the specified
	#  		index in the list.
	#------------------------------------------------------------------------------
	websocket '/saveVolunteerInfo' => sub
	{
		my $self = shift;


		##
		##  See if we received a message
		##
		$self->on( json => sub
					{
						my ($self, $json) = @_;

						##
						##  Write the volunteer info to the database
						##
						saveVolunteer( $json);
						
						##
						##  Send back info
						##
						$self->send( { json=> {	status => "OK" }});
					}
				 );
	};

	@Slots = readSlots();

	app->config( hypnotoad=>{listen =>['http://*:3000']});
	app->secrets( ['Your mileage may vary']);
	app->start;
}


#------------------------------------------------------------------------------
#  sub findVolunteer( $index, $name)
#  		This subroutine looks through the @Volunteers list (beginning with the
#  		provided index) to find an entry for the provided name.  If one is
#  		found, the routine returns the index of the entry and the entry.  If it
#  		is not found it returns (undef, undef).
#------------------------------------------------------------------------------
sub findVolunteer($$)
{
	my ($startAt, $name) = @_;
	my $slot;
	my $index;

	@Volunteers = readVolunteers();
	if ( !defined( $startAt) || !defined( $Volunteers[$startAt]) || $Volunteers[$startAt]->{name} ne $name)
	{
		while( my ($i, $volunteer) = each( @Volunteers))
		{
			if ( $volunteer->{name} eq $name)
			{
				$index = $i;
				$slot = $volunteer;
				last;
			}
		}
	}
	else
	{
		$index = $startAt;
		$slot = $Volunteers[$index];
	}

	return( $index, $slot);
}
