<!DOCTYPE html>

<html>
<head>
	<link rel="stylesheet" href="/site.css">

<script src="/scheduler.js"> </script>

<script>
	var originalName = '';
	var dateType = '';

	//==============================================================================
	//	function saveNewVolunteer()
	//		This function adds the information added for the volunteer to the
	//		"positions" table.
	//==============================================================================
	function saveNewVolunteer()
	{
		var volunteer = getVolunteerInfo();

		if ( volunteer.name.length == 0)
		{
			alert( "Please enter the name of the volunteer.");
			return;
		}

		if ( volunteer.desiredRoles.length == 0)
		{
			alert( "Please select at least one position that " + volunteer.name + " would like to volunteer for.");
			return;
		}
		saveVolunteerInfo( volunteer, clearEntries);
	}

	//==============================================================================
	//	function clearEntries()
	//		This function clears all of the fields after a user has been added.
	//==============================================================================
	function clearEntries()
	{
		window.location.reload();
		document.getElementById( 'name').value = '';
		document.getElementById( 'email').value = '';
		document.getElementById( 'phone').value = '';

		//
		//  Unselect contact method
		//
		var contactMethod = document.getElementById( 'contactMethod');
		for ( var i=0; i < contactMethod.options.length; i++)
		{
			contactMethod.options[i].selected = false;
		}

		//
		//  Unselect positions
		//
		var positions = document.getElementById( 'positions');
		for ( var i=0; i < positions.options.length; i++)
		{
			positions.options[i].selected = false;
		}

		//
		//  Remove days unavailable
		//
		var daysUnavailable = document.getElementById( 'daysUnavailable');
		while( daysUnavailable.options.length > 0)
		{
			daysUnavailable.remove(0);
		}

		//
		//  Set default to '-none-'
		//
		var newDate = document.createElement('option');
		var newDateText = document.createTextNode( '-none-');
		newDate.appendChild( newDateText);
		newDate.setAttribute( "value", '-none-');
		daysUnavailable.appendChild( newDate);
		daysUnavailable.size = 1;
	
		//
		//  Remove days desired
		//
		var daysDesired = document.getElementById( 'daysDesired');
		while( daysDesired.options.length > 0)
		{
			daysDesired.remove(0);
		}
		
		//
		//  Set default to '-none-'
		//
		newDate = document.createElement('option');
		newDateText = document.createTextNode( '-none-');
		newDate.appendChild( newDateText);
		newDate.setAttribute( "value", '-none-');
		daysDesired.appendChild( newDate);
		daysDesired.size = 1;
	}

	//==============================================================================
	//	function modifyVolunteer()
	//		This function modifies the information added for the volunteer in the
	//		"positions" table.
	//==============================================================================
	function modifyVolunteer()
	{
		var volunteer = getVolunteerInfo();
		hideConfirmSave();

		fetch( '/modifyVolunteer' ,
				{
					method: "POST",
					body: JSON.stringify( { 'originalName': originalName, 'info': volunteer}),
					headers: { "Content-type": "application/json"}
				}
			  )
		.then( response => 
				{
					history.back();
				});
	}

	//==============================================================================
	//	function editDaysUnvailable()
	//		This function redirects to a screen where the user can edit the list of
	//		days when the volunteer is unavailable to work.
	//==============================================================================
	function editDaysDesired()
	{
		var name = document.getElementById( 'name').value;
		var editBoxTitle = document.getElementById( 'dateEditTitle');
		editBoxTitle.innerText = 'Dates When ' + name + ' desires to volunteer:';
		dateType = 'daysDesired'
		getDatesToEdit();
	
		showEditDates();
	}

	//==============================================================================
	//	function editDaysUnvailable()
	//		This function redirects to a screen where the user can edit the list of
	//		days when the volunteer is unavailable to work.
	//==============================================================================
	function editDaysUnavailable()
	{
		var name = document.getElementById( 'name').value;
		var editBoxTitle = document.getElementById( 'dateEditTitle');
		editBoxTitle.innerText = 'Dates When ' + name + ' is Unavailable:';
		dateType = 'daysUnavailable'
		getDatesToEdit();
	
		showEditDates();
	}

	//==============================================================================
	//	function addDate()
	//		This function adds the date entered into the "dateToAdd" field to the
	//		dateList in the dateEdit dialog
	//==============================================================================
	function addDate()
	{
		var dateInput = document.getElementById( 'dateToAdd')
		var newDate = dateInput.value;
		var dateList = document.getElementById( 'dateList');
		let invalidDate = false;

		if ( newDate.length < 10)
		{
			alert( "That is not a valid date.");
			return;
		}
		
		//
		//  Store the old dates in an array
		//
		var dateValues = Array.from( dateList.options, (x) => {return x.value});

		//
		//  Check for duplicates
		//
		dateValues.forEach( (date) =>
			{
				if ( date == newDate)
				{
					alert( "The date " + newDate + " is already in the list.");
					invalidDate = true;
				}
			});

		if ( invalidDate)
		{
			return;
		}
		//
		//  Delete the old elements from the list
		//
		while( dateList.options.length > 0)
		{
			dateList.remove( 0);
		}

		//
		//  Add the new date to the array and sort it
		//
		dateValues.push( newDate);
		dateValues.sort();

		//
		//  Put the sorted dates back into the list
		//
		dateValues.forEach( (date) => 
			{
				var newDate = document.createElement('option');
				var newDateText = document.createTextNode( date);
				newDate.appendChild( newDateText);
				newDate.setAttribute( "value", date);
				dateList.appendChild( newDate);
			});

		showAddedAlert();
		dateInput.value = '';
	}

	//==============================================================================
	//	function getDatesToEdit()
	//		This function pulls the date from the edit volunteer dialog and copies
	//		them to the dateEdit dialog.
	//==============================================================================
	function getDatesToEdit()
	{
		var	datesToEdit = document.getElementById('dateList');
		var previousDatesProvided;
		if ( dateType == 'daysUnavailable')
		{
			previousDatesProvided = document.getElementById( 'daysUnavailable');
		}
		else
		{
			previousDatesProvided = document.getElementById( 'daysDesired');
		}

		//
		//  Delete any previously entered dates
		//
		while( datesToEdit.options.length > 0)
		{
			datesToEdit.remove(0);
		}


		//
		//  Copy over the original dates
		//
		let counter = 0;
		while( counter < previousDatesProvided.options.length)
		{
			var date = previousDatesProvided.options[counter].value;
			if ( date != '-none-')
			{
				var newDate = document.createElement('option');
				var newDateText = document.createTextNode( date);
				newDate.appendChild( newDateText);
				newDate.setAttribute( "value", date);
				datesToEdit.appendChild( newDate);
			}
			counter++;
		}
	}

	//==============================================================================
	//	function updateEditedDates()
	//		This function updates the contents of the selected dates with the newly
	//		provided dates.
	//==============================================================================
	function updateEditedDates()
	{
		var	editedDates = document.getElementById('dateList');
		var datesBeingReplaced;
		if ( dateType == 'daysUnavailable')
		{
			datesBeingReplaced = document.getElementById( 'daysUnavailable');
		}
		else
		{
			datesBeingReplaced = document.getElementById( 'daysDesired');
		}

		//
		//  Delete the previously entered dates
		//
		while( datesBeingReplaced.options.length > 0)
		{
			datesBeingReplaced.remove(0);
		}

		//
		//  Are we sending any dates back?
		//
		if ( editedDates.options.length > 0)
		{
			//
			//  Then add the newly entered dates
			//
			while( editedDates.options.length > 0)
			{
				var date = editedDates.options[0].value;
				var newDate = document.createElement('option');
				var newDateText = document.createTextNode( date);
				newDate.appendChild( newDateText);
				newDate.setAttribute( "value", date);
				datesBeingReplaced.appendChild( newDate);
				editedDates.remove( 0);
			}
		}
		else
		{
			var none = '-none-';
			var newDate = document.createElement('option');
			var newDateText = document.createTextNode( none);
			newDate.appendChild( newDateText);
			newDate.setAttribute( "value", none);
			datesBeingReplaced.appendChild( newDate);
		}

		datesBeingReplaced.size = ( datesBeingReplaced.options.length > 3) ? 3 : datesBeingReplaced.length;
	}

	//==============================================================================
	//	function saveEditedDates()
	//		This function stores the edited dates in the appropriate date list and
	//		closes the date edit dialog.
	//==============================================================================
	function saveEditedDates()
	{
		updateEditedDates();
		hideEditDates();
	}

	//==============================================================================
	//	function deleteSelectedDates()
	//		This function removes all selected dates from the edit dates dialog.
	//==============================================================================
	function deleteSelectedDates()
	{
		var	dateList = document.getElementById('dateList');

		var counter = dateList.options.length - 1;
		while( counter >= 0)
		{
			if ( dateList.options[counter].selected)
			{
				dateList.remove( counter);
			}
			counter--;
		}
	}

	//==============================================================================
	//	function getVolunteerInfo()
	//		This function retrieves all of the pertinent volunteer info entered
	//		on the screen and returns it as a JSON volunteer object.
	//==============================================================================
	function getVolunteerInfo()
	{
		var name = document.getElementById( 'name').value;
		var email = document.getElementById( 'email').value;
		var phone = document.getElementById( 'phone').value;
		var contact = document.getElementById( 'contactMethod').value;
		var positions = '';
		var position = document.getElementById( 'positions');
		for( var i=0; i < position.options.length; i++)
		{
			if ( position.options[i].selected)
			{
				positions +=  position.options[i].value + ",";
			}
		}

		var unavailableDays = '';
		var daysUnavailable = document.getElementById( 'daysUnavailable');
		for ( let i=0; i < daysUnavailable.options.length; i++)
		{
			if ( daysUnavailable.options[i].value != '-none-')
			{
				unavailableDays +=  daysUnavailable.options[i].value + ",";
			}
		}

		var desiredDays = '';
		var daysDesired = document.getElementById( 'daysDesired');
		for( let i=0; i < daysDesired.options.length; i++)
		{
			if ( daysDesired.options[i].value != '-none-')
			{
				desiredDays +=  daysDesired.options[i].value + ",";
			}
		}

		var volunteer = { "name": name, "email": email, "phone": phone, "desiredRoles": positions, "daysUnavailable": unavailableDays, "daysDesired": desiredDays, "contact": contact};
		return volunteer;
	}
	

	function returnToVolunteers()
	{
		% if ( $userMode)
		% {
		window.location.href = 'https://www.stjamesbg.org/';
		% }
		% else
		% {
		window.location.href = '/editVolunteers';
		% }
	}

    % if ( $type eq "edit")
	% {
	window.addEventListener( "pageshow", function () {originalName='<%= ($type eq "edit")? $volunteer->{name} : "" %>'; showVolunteerInfo();} );
    % }
	% if ( $userMode)
	% {
	window.addEventListener( "pageshow", hideNavbar);
	% }

</script>

</head>

<!--=================================-->
<!--| HTML for the page starts here |-->
<!--=================================-->
<body>
<div id="navbar">
</div>

	
<div id="overlay" hidden >
	<div class="popup" id="confirmSave" hidden>
		<h2>Save Entry</h2>
		<p>Do you wish to save this update for <%= $volunteer->{name} %>?</p>
		<button onclick="modifyVolunteer()">Ok</button>
		<button onclick="hideConfirmSave()">Cancel</button>
	</div>
	<div id="dateEdit" hidden>
		<h2 id='dateEditTitle'>Here are the current dates</h2>
		<select class="dateList" id="dateList" multiple size="3">
		</select>
		<div class="editPanel">
			<label for="dateToAdd">Add date: </label>
			<input type="date" id="dateToAdd" name="dateToAdd"></input>
			<button type="button" style="width:4em;font-size:90%" onClick="addDate()">Add</button>
			<br>
			<button type="button" style="width:20em;font-size:90%" onClick="deleteSelectedDates()">Delete selected dates</button>
		</div>
		<br>
		<div class="dialogButtons">
			<button type="button" onClick="saveEditedDates()" >Ok</button>
			<button type="button" onClick="hideEditDates()">Cancel</button>
		</div>
	</div>
	<div id="added" hidden>
		<h2>Added</h2>
	</div>
</div>
	

<h1><%= $title %></h1>

%if ( $type eq 'add')
% {
<select name="volunteers" class="nameList" id="itemList" size="10" disabled>
   % my $first = 1;
   %foreach my $volunteer (@{$volunteers})
   %{
   <option value="<%= $volunteer->{name} %>"><%= $volunteer->{name} %></option>
   % $first = 0;
   %}
</select>
%}

<div id="<%= (!$userMode && $type eq 'add') ? 'addUserDescription' : 'holder' %>">
	<div id="userInfo">
		<form>
		<label for="name">Name:</label>
		<input type="text" id="name" name="name" value="<%= ( $type eq 'edit') ? $volunteer->{name} : "" %>"></input>
		<br>
		<label for="email">Email address:</label>
		<input type="email" id="email" name="email" value="<%= ($type eq 'edit')? $volunteer->{email} : "" %>"></input>
		<br>
		<label for="phone">Phone number:</label>
		<input type="tel" id="phone" name="phone" pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}" value="<%= ($type eq 'edit')? $volunteer->{phone} : "" %>"></input>
		<br>
		<label for="contactMethod">Contact by: </label>
		<select id="contactMethod">
		% for my $contactType ( ('email', 'text', 'both'))
		% {
		%   my $selected;
		%   if ( $type eq 'edit')
		%	{
		%		$selected = ($volunteer->{contact} eq $contactType) ? 'selected="selected"' : "";
		%	}
		%	else
		%	{
		%		$selected = ($contactType eq 'both') ? 'selected="selected"' : "";
		%   }
			<option value="<%= $contactType %>" <%== $selected %> title="Select how you would prefer to be contacted."><%= $contactType %></option>
		% }
		</select>
		<br>
		<label for="positions" title="Select the positions you wish to volunteer for.">Positions:</label>

		% my @roles;
		% my $desiredRoles = '';
		% if ( $type eq 'edit')
		% {
		%    $desiredRoles = $volunteer->{desiredRoles};
		% }
		% foreach ( @$slots)
		% {
		%	push( @roles, $_->{title});
		% }
		% my $roleCount = int( @roles);
		% my $showScroll = "";
		% if ( $roleCount > 1)
		% {
		%   $showScroll = 'overflow-y: scroll';
		% }
		<select name="positions" id="positions" multiple size="<%= ($roleCount)? (($roleCount > 3) ? 3: $roleCount) : 1 %>" style="<%= $showScroll %>">
		% if ( @roles)
		% {
		%  foreach my $role (@roles)
		%    {
		%		my $selected = ( $desiredRoles =~ m/$role/i) ? 'selected="selected"' : "";
			<option value="<%= $role %>" <%== $selected %> title="Select the positions you wish to volunteer for."><%= $role %></option>
		%    }
		% }
		% else
		% {
			<option value="-none-"></option>
		% }
		</select>
		<br>
		<label for="daysUnavailable" title="Days you are not available to volunteer">Days unavailable:</label>

		% my @daysUnavailable;
		% if (( $type eq 'edit') && defined( $volunteer->{daysUnavailable}))
		% {
		%    @daysUnavailable = split(",", $volunteer->{daysUnavailable});
		% }
		% my $count = int( @daysUnavailable);
		<select name="daysUnavailable" class="dateList" id="daysUnavailable" title="Days you are not available to volunteer" multiple size="<%= ($count)? (($count > 3) ? 3 : $count) : 1 %>">
		% if ( @daysUnavailable)
		% {
		%  foreach my $day (@daysUnavailable)
		%    {
			<option value="<%= $day %>" title="Days you are not available to volunteer"><%= $day %></option>
		%    }
		% }
		% else
		% {
			<option value="-none-">-none-</option>
		% }
		</select>
		</select>
		<button type="button" class="editButton" onClick="editDaysUnavailable()" >Edit</button>
		<br>
		<label for="daysDesired" title="A special day when you would prefer to work">Days desired:</label>
		% my @daysDesired;
		% if (( $type eq 'edit') && defined( $volunteer->{daysDesired}))
		% {
		%    @daysDesired = split(",", $volunteer->{daysDesired});
		% }
		% $count = int( @daysDesired);
		<select name="daysDesired" class="dateList" id="daysDesired" title="A special day when you would prefer to work" multiple size="<%= ($count)? (($count > 3) ? 3 : $count) : 1 %>">
		% if ( @daysDesired)
		% {
		%  foreach my $day (@daysDesired)
		%    {
			<option value="<%= $day %>" title="A special day when you would prefer to work"><%= $day %></option>
		%    }
		% }
		% else
		% {
			<option value="-none-">-none-</option>
		% }
		</select>
		<button type="button" class="editButton" onClick="editDaysDesired()">Edit</button>

		<br>
		% if ( $type eq "edit")
		% {
		<button type="button" onclick="showConfirmSave()">Save</button>
		% }
		%else
		% {
		<button type="button" onclick="saveNewVolunteer()">Save</button>
		% }
		<button type="button" onclick="returnToVolunteers()">Cancel</button>
		</form>
	</div>
</div>
</body>

</html>

